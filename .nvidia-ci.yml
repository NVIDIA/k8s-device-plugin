# Copyright (c) 2021-2022, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include:
  - local: '.common-ci.yml'

default:
  tags:
    - cnt
    - container-dev
    - docker/multi-arch
    - docker/privileged
    - os/linux
    - type/docker

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  # Release "devel"-tagged images off the main branch
  RELEASE_DEVEL_BRANCH: "main"
  DEVEL_RELEASE_IMAGE_VERSION: "devel"
  # On the multi-arch builder we don't need the qemu setup.
  SKIP_QEMU_SETUP: "1"
  # Define the public staging registry
  STAGING_REGISTRY: ghcr.io/nvidia
  STAGING_VERSION: ${CI_COMMIT_SHORT_SHA}

.image-pull:
  stage: image-build
  variables:
    IN_REGISTRY: "${STAGING_REGISTRY}"
    IN_IMAGE_NAME: k8s-device-plugin
    IN_VERSION: "${STAGING_VERSION}"
    OUT_REGISTRY_USER: "${CI_REGISTRY_USER}"
    OUT_REGISTRY_TOKEN: "${CI_REGISTRY_PASSWORD}"
    OUT_REGISTRY: "${CI_REGISTRY}"
    OUT_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/k8s-device-plugin"
    PUSH_MULTIPLE_TAGS: "false"
  # We delay the job start to allow the public pipeline to generate the required images.
  when: delayed
  start_in: 30 minutes
  timeout: 30 minutes
  retry:
    max: 2
    when:
      - job_execution_timeout
      - stuck_or_timeout_failure
  before_script:
    - !reference [.regctl-setup, before_script]
    - apk add --no-cache make bash
    - >
      regctl manifest get ${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DIST} --list > /dev/null && echo "${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DIST}" || ( echo "${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DIST} does not exist" && sleep infinity )
  script:
    - regctl registry login "${OUT_REGISTRY}" -u "${OUT_REGISTRY_USER}" -p "${OUT_REGISTRY_TOKEN}"
    - make -f deployments/container/Makefile IMAGE=${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DIST} OUT_IMAGE=${OUT_IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}-${DIST} push-${DIST}

image-ubi9:
  extends:
    - .image-pull
    - .dist-ubi9

# We skip the integration tests for the internal CI:
.integration:
  stage: test
  before_script:
    - echo "Skipped in internal CI"
  script:
    - echo "Skipped in internal CI"

# The .scan step forms the base of the image scan operation performed before releasing
# images.
.scan:
  extends:
    - .scan-base
  stage: scan
  image: "${PULSE_IMAGE}"
  script:
    - AuthHeader=$(echo -n $SSA_CLIENT_ID:$SSA_CLIENT_SECRET | base64 -w0)
    - >
      export SSA_TOKEN=$(curl --request POST --header "Authorization: Basic $AuthHeader" --header "Content-Type: application/x-www-form-urlencoded" ${SSA_ISSUER_URL} | jq ".access_token" |  tr -d '"')
    - if [ -z "$SSA_TOKEN" ]; then exit 1; else echo "SSA_TOKEN set!"; fi
    - pulse-cli -n $NSPECT_ID --ssa $SSA_TOKEN scan -i $IMAGE_ARCHIVE -p $CONTAINER_POLICY -o
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - pulse-cli.log
      - licenses.json
      - sbom.json
      - vulns.json
      - policy_evaluation.json

.ngc-publish-variables:
  variables:
    PROJECT_NAME: "k8s-device-plugin"
    VERSIONS_FILE: "build-info-${CI_PIPELINE_ID}.txt"
  before_script:
    - |
      if [ -n "${CI_COMMIT_TAG}" ]; then
        echo "${CI_COMMIT_SHORT_SHA} ${CI_COMMIT_TAG}" > "${VERSIONS_FILE}"
      else
        echo "${CI_COMMIT_SHORT_SHA} publish-${CI_COMMIT_SHORT_SHA}" > "${VERSIONS_FILE}"
      fi

.update-nspect:
  stage: ngc-publish
  needs:
    - job: release:staging-ubi9
  extends:
    - .ngc-publish-variables
  image:
    name: "${CNT_NGC_PUBLISH_IMAGE}"
    pull_policy: always
  variables:
    REPO_URL: "https://github.com/NVIDIA/${PROJECT_NAME}.git"
  script:
    - |
      cnt-ngc-publish nspect --versions-file "${VERSIONS_FILE}"

# Update the nspect staging environment to test the nspect publishing logic
update-nspect-staging:
  extends:
    - .update-nspect
  rules:
    - if: $CI_COMMIT_TAG == null || $CI_COMMIT_TAG == ""
  variables:
    ENV: "stage"
    RELEASE_VERSION: "test"
    NSPECT_CLIENT_ID: "${NSPECT_STAGING_CLIENT_ID}"
    NSPECT_CLIENT_SECRET: "${NSPECT_STAGING_CLIENT_SECRET}"

# Update the nspect production environment with the new release
update-nspect:
  extends:
    - .update-nspect
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    OSRB_BUG_ID: "${OSRB_BUG_ID}"
    ENV: "prod"
    RELEASE_VERSION: "${CI_COMMIT_TAG}"
    NSPECT_CLIENT_ID: "${NSPECT_PROD_CLIENT_ID}"
    NSPECT_CLIENT_SECRET: "${NSPECT_PROD_CLIENT_SECRET}"

.publish-images:
  stage: ngc-publish
  extends:
    - .ngc-publish-variables
  image:
    name: "${CNT_NGC_PUBLISH_IMAGE}"
    pull_policy: always
  variables:
    GITLAB_ACCESS_TOKEN: "${CNT_GITLAB_TOKEN}"
    # Allow for setting nspect program version manually.
    # The default empty string value results in the key
    # being omitted from the publishing doc (which is
    # valid).
    NSPECT_PROGRAM_VERSION: ""
  script:
    - |
      if [ -z "${NGC_PUBLISHING_PROJECT_PATH}" ]; then
        echo "NGC_PUBLISHING_PROJECT_PATH not set"
        exit 1
      fi

      echo "publishing to ${NGC_PUBLISHING_PROJECT_PATH}"

      cnt-ngc-publish render \
          --project-name "${PROJECT_NAME}" \
          --versions-file "${VERSIONS_FILE}" \
          --output "${PROJECT_NAME}.yaml" \
          --nspect-program-version "${NSPECT_PROGRAM_VERSION}"
    - cnt-ngc-publish merge-request --files "${PROJECT_NAME}.yaml"
  artifacts:
    paths:
      - "${VERSION_FILE}"
      - "${PROJECT_NAME}.yaml"

# Raise an MR to publish the image to NGC
ngc-image-publish:
  extends:
    - .publish-images
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - job: update-nspect
  variables:
    NGC_PUBLISHING_PROJECT_PATH: "${NGC_PUBLISHING_PROD_PROJECT_PATH}"

# Create a dummy MR that exercises the publishing logic
mock-image-publish:
  extends:
    - .publish-images
  rules:
    - if: $CI_COMMIT_TAG == null || $CI_COMMIT_TAG == ""
  needs:
    - job: update-nspect-staging
  variables:
    NGC_PUBLISHING_PROJECT_PATH: "${NGC_PUBLISHING_TEST_PROJECT_PATH}"
